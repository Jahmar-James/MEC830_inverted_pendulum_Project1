<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from src/inverted_pendulum_simulation/urdf/inverted_pendulum.xacro | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<!-- This is a simple model of an inverted pendulum on a cart. The cart is
     constrained to move along a rail, and the pendulum is attached to the
     cart. The pendulum is free to rotate about the cart, and the cart is
     free to move along the rail. -->
<!-- Main URDF file -->
<!-- URDF generally uses meters, kilograms, and radians for lengths, masses, and angles, respectively -->
<robot name="inverted_pendulum">
  <!-- Specify some colours -->
  <material name="white">
    <color rgba="1 1 1 1"/>
  </material>
  <material name="orange">
    <color rgba="1 0.3 0.1 1"/>
  </material>
  <material name="blue">
    <color rgba="0.2 0.2 1 1"/>
  </material>
  <material name="black">
    <color rgba="0 0 0 1"/>
  </material>
  <material name="green">
    <color rgba="0.2 1 0.2 1"/>
  </material>
  <material name="purple">
    <color rgba="0.5 0.2 1 1"/>
  </material>
  <!-- Specify some standard inertial calculations https://en.wikipedia.org/wiki/List_of_moments_of_inertia -->
  <!-- These make use of xacro's mathematical functionality -->
  <!-- Declare variables -->
  <link name="world"/>
  <joint name="base_joint" type="fixed">
    <origin rpy="0 0 0" xyz="1.5 1.0 0"/>
    <parent link="world"/>
    <child link="base_link"/>
  </joint>
  <link name="base_link">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0.05"/>
      <geometry>
        <box size="2.5 1.5 0.1"/>
      </geometry>
      <material name="green">
        <color rgba="0.2 1 0.2 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0.05"/>
      <geometry>
        <box size="2.5 1.5 0.1"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0.05"/>
      <mass value="12"/>
      <inertia ixx="2.26" ixy="0.0" ixz="0.0" iyy="6.26" iyz="0.0" izz="8.5"/>
    </inertial>
  </link>
  <gazebo reference="base_link">
    <material>Gazebo/Road</material>
  </gazebo>
  <!-- Rail Link -->
  <link name="rail">
    <static>true</static>
    <inertial>
      <mass value="100"/>
      <inertia ixx="2.0833333333333335" ixy="0.0" ixz="0.0" iyy="0.0" iyz="0.0" izz="2.0833333333333335"/>
    </inertial>
    <visual>
      <material name="black"/>
      <geometry>
        <box size="0.5 0.02 0.02"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <box size="0.5 0.02 0.02"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="rail">
    <material>Gazebo/Black</material>
  </gazebo>
  <!-- Fixed joint to fix robot to Gazebo 'base_link' -->
  <joint name="rail_fixed" type="fixed">
    <parent link="base_link"/>
    <child link="rail"/>
    <origin rpy="0 0 0" xyz="0 0 0.11"/>
  </joint>
  <!-- Cart Link -->
  <link name="cart">
    <inertial>
      <mass value="20.0"/>
      <!-- Design parameter, adjust as needed -->
      <inertia ixx="0.017708333333333336" ixy="0.0" ixz="0.0" iyy="0.02083333333333334" iyz="0.0" izz="0.005208333333333335"/>
    </inertial>
    <visual>
      <geometry>
        <box size="0.05 0.1 0.025"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <box size="0.05 0.1 0.025"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="cart">
    <material>Gazebo/Red</material>
  </gazebo>
  <gazebo>
    <plugin filename="libgazebo_ros_force.so" name="gazebo_ros_force_controller">
      <ros>
        <namespace>/</namespace>
        <remapping>gazebo_ros_force:=cart_force</remapping>
      </ros>
      <link_name>cart</link_name>
      <update_rate>100.0</update_rate>
      <force_frame>link</force_frame>
    </plugin>
  </gazebo>
  <!-- Joint connecting rail and cart -->
  <joint name="rail_cart_joint" type="prismatic">
    <parent link="rail"/>
    <child link="cart"/>
    <origin rpy="0 0 0" xyz="0 0 0.01"/>
    <axis xyz="1 0 0"/>
    <limit effort="100" lower="-0.25" upper="0.25" velocity="2"/>
    <dynamics damping="0.5"/>
    <!-- Estimated damping coefficient -->
  </joint>
  <!-- Pendulum Rod Link -->
  <link name="pendulum_rod">
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0.2"/>
      <mass value="2.0"/>
      <!-- Design Var -->
      <inertia ixx="0.10666666666666669" ixy="0.0" ixz="0.0" iyy="0.0" iyz="0.0" izz="0.10666666666666669"/>
    </inertial>
    <visual>
      <geometry>
        <cylinder length="0.4" radius="0.005"/>
      </geometry>
      <material name="purple"/>
      <origin rpy="0 0 0" xyz="0 0 0.2"/>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.4" radius="0.005"/>
      </geometry>
      <origin rpy="0 0 0" xyz="0 0 0.2"/>
    </collision>
  </link>
  <gazebo reference="pendulum_rod">
    <material>Gazebo/Purple</material>
  </gazebo>
  <!-- Joint connecting cart and pendulum rod -->
  <joint name="cart_pendulum_rod_joint" type="revolute">
    <parent link="cart"/>
    <child link="pendulum_rod"/>
    <origin rpy="0 0 0" xyz="0 -0.055  0"/>
    <axis xyz="0 1 0"/>
    <dynamics damping="0.1"/>
    <!-- Estimated damping coefficient -->
    <limit effort="1000.0" lower="-1.5707963267948966" upper="1.5707963267948966" velocity="1000.0"/>
    <gazebo>
      <provideFeedback>true</provideFeedback>
    </gazebo>
  </joint>
  <!-- Pendulum Mass Link  at the top of the pendulum -->
  <link name="pendulum_mass">
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.05"/>
      <!-- 50-100g -->
      <inertia ixx="1" ixy="0" ixz="0" iyy="1" iyz="0" izz="1"/>
    </inertial>
    <visual>
      <geometry>
        <sphere radius="0.01"/>
      </geometry>
      <material name="white"/>
    </visual>
    <collision>
      <geometry>
        <sphere radius="0.01"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="pendulum_mass">
    <material>Gazebo/White</material>
  </gazebo>
  <!-- Joint connecting pendulum rod and pendulum mass -->
  <joint name="pendulum_rod_mass_joint" type="fixed">
    <parent link="pendulum_rod"/>
    <child link="pendulum_mass"/>
    <origin rpy="0 0 0" xyz="0 0 0.4"/>
  </joint>
  <gazebo>
    <plugin filename="libgazebo_ros_force.so" name="gazebo_ros_disturbance_controller">
      <ros>
        <namespace>/</namespace>
        <remapping>gazebo_ros_force:=pendulum_disturbance_force</remapping>
      </ros>
      <link_name>pendulum_mass</link_name>
      <update_rate>100.0</update_rate>
      <force_frame>link</force_frame>
    </plugin>
  </gazebo>
  <!-- Mass of ultrasonic sensor -->
  <!-- Inertia about z-axis -->
  <!-- Sensors -->
  <!-- Base define - later add noise, bias -->
  <!-- Ultrasonic Sensor Link -->
  <link name="ultrasonic_sensor_link">
    <inertial>
      <mass value="0.01"/>
      <inertia ixx="1e-6" ixy="0.0" ixz="0.0" iyy="1e-6" iyz="0.0" izz="1e-6"/>
      <!-- Small inertia values for the sensor -->
    </inertial>
    <visual>
      <geometry>
        <box size="0.02 0.02 0.02"/>
        <!-- Sensor modeled as a box -->
      </geometry>
      <material name="blue"/>
    </visual>
    <collision>
      <geometry>
        <box size="0.02 0.02 0.02"/>
        <!-- Same geometry for collision -->
      </geometry>
    </collision>
  </link>
  <!-- Fixed Joint connecting Ultrasonic Sensor to Rail -->
  <joint name="ultrasonic_sensor_joint" type="fixed">
    <parent link="rail"/>
    <child link="ultrasonic_sensor_link"/>
    <origin rpy="0 0 3.141592653589793" xyz="0.25 0 0.02"/>
    <!-- Positioned at the end of the rail, adjust xyz values as needed -->
  </joint>
  <gazebo reference="ultrasonic_sensor_link">
    <material>Gazebo/Blue</material>
    <sensor name="ultrasonic_sensor" type="ray">
      <always_on>true</always_on>
      <pose>0 0 0 0 0 0</pose>
      <!-- Sensor's position w.r.t its parent link -->
      <visualize>true</visualize>
      <!-- If you want to visualize the sensor's rays in Gazebo, set to true -->
      <update_rate>5.0</update_rate>
      <!-- The rate at which Gazebo updates the sensor's internal readings -->
      <ray>
        <scan>
          <horizontal>
            <!-- Horizontal scan parameters -->
            <samples>1</samples>
            <!-- Number of samples per scan -->
            <resolution>1</resolution>
            <!-- Angular resolution in degrees -->
          </horizontal>
        </scan>
        <range>
          <min>0.025</min>
          <!-- Minimum sensing distance -->
          <max>5.0</max>
          <!-- Maximum sensing distance -->
          <resolution>0.01</resolution>
          <!-- Distance resolution -->
        </range>
      </ray>
      <!-- The plugin to handle the connection between Gazebo and ROS -->
      <plugin filename="libgazebo_ros_ray_sensor.so" name="gazebo_ros_ultrasonic_sensor">
        <ros>
          <namespace>/Ultrasonic</namespace>
          <remapping>~/out:=/ultrasonic_distance</remapping>
        </ros>
        <frame_name>ultrasonic_sensor_link</frame_name>
        <!-- The TF frame for the ultrasonic data -->
        <update_rate>5</update_rate>
        <!-- Update rate for publishing to the ROS topic -->
        <radiation_type>ultrasound</radiation_type>
        <output_type>sensor_msgs/Range </output_type>
        <!-- The ROS message type for the ultrasonic data -->
        <gaussian_noise>0.01</gaussian_noise>
        <!-- Gaussian noise added to the sensor data assume mean is 0 only specifcy the std -->
        <always_on>true</always_on>
        <visualize>true</visualize>
      </plugin>
    </sensor>
  </gazebo>
  <!-- IMU Link -->
  <link name="imu_link">
    <inertial>
      <mass value="0.01"/>
      <inertia ixx="1e-06" ixy="0.0" ixz="0.0" iyy="1e-06" iyz="0.0" izz="1e-06"/>
    </inertial>
    <visual>
      <geometry>
        <box size="0.05 0.05 0.02"/>
      </geometry>
      <material name="white"/>
    </visual>
    <collision>
      <geometry>
        <box size="0.05 0.05 0.02"/>
      </geometry>
    </collision>
  </link>
  <!-- Fixed Joint connecting IMU to Cart -->
  <joint name="imu_joint" type="fixed">
    <parent link="cart"/>
    <child link="imu_link"/>
    <origin rpy="0 0 0" xyz="0 0 0.0125"/>
    <!-- Positioned at the center-top of the cart. Adjust xyz values if IMU placement differs -->
  </joint>
  <gazebo reference="imu_link">
    <gravity>true</gravity>
    <!-- Include if you need to simulate gravity's effect -->
    <sensor name="imu_sensor" type="imu">
      <always_on>true</always_on>
      <!-- Ensure the sensor is always on -->
      <update_rate>50.0</update_rate>
      <!-- Update rate for Gazebo's internal sensor -->
      <visualize>false</visualize>
      <!-- If you want to visualize the sensor in Gazebo, set to true -->
      <!-- <topic>__default_topic__</topic> -->
      <pose>0 0 0.0125 0 0 0</pose>
      <!-- Sensor's position w.r.t its parent link -->
      <!-- The plugin parameters -->
      <plugin filename="libgazebo_ros_imu_sensor.so" name="gazebo_ros_imu_sensor_plugin">
        <ros>
          <!-- publish to /imu/data -->
          <namespace>/imu</namespace>
          <remapping>~/out:=data</remapping>
        </ros>
        <frameName>imu_link</frameName>
        <!-- The TF frame for the IMU data -->
        <updateRateHZ>50.0</updateRateHZ>
        <!-- Update rate for publishing to ROS -->
        <gaussianNoise>0.0</gaussianNoise>
        <!-- Gaussian noise added to the sensor data -->
        <xyzOffset>0 0 0</xyzOffset>
        <!-- Offset of the sensor if necessary -->
        <rpyOffset>0 0 0</rpyOffset>
        <!-- Orientation offset of the sensor if necessary -->
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
        <!-- Use the initial orientation as reference -->
      </plugin>
    </sensor>
    <material>Gazebo/Green</material>
  </gazebo>
  <!-- Rotary Encoder Link (Virtual Link) -->
  <link name="rotary_encoder_link"/>
  <gazebo reference="rotary_encoder_link">
    <material>Gazebo/BlueTransparent</material>
  </gazebo>
  <!-- Joint connecting rotary encoder to the cart_pendulum_rod_joint -->
  <joint name="rotary_encoder_joint" type="revolute">
    <parent link="cart"/>
    <child link="rotary_encoder_link"/>
    <origin rpy="0 0 0" xyz="0 -0.052500000000000005 0"/>
    <axis xyz="0 1 0"/>
    <dynamics damping="0.1"/>
    <!-- Estimated damping coefficient -->
    <limit effort="1000.0" lower="1.5707963267948966" upper="4.71238898038469" velocity="1000.0"/>
  </joint>
  <gazebo>
    <plugin filename="libgazebo_ros_joint_state_publisher.so" name="gazebo_ros_joint_state_publisher">
      <joint_name>cart_pendulum_rod_joint</joint_name>
      <!-- Other settings if required -->
    </plugin>
  </gazebo>
</robot>
